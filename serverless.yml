service: serverless-tutorial
frameworkVersion: "2"

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  stage: "dev"
  apiGateway:
    shouldStartNameWithService: true
  environment:
    orderTableName: ${self:custom.orderTableName}
    ordersBucketName: ${self:custom.ordersBucketName}
    ordersQueue: { Ref: OrdersQueue }

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchWriteItem
      Resource:
        Fn::GetAtt:
          - OrdersTable
          - Arn
    - Effect: Allow
      Action:
        - s3:GetObject
      Resource:
        Fn::Join:
          - ""
          - - "arn:aws:s3:::"
            - "Ref": "OrdersBucket"
            - "/*"
    - Effect: Allow
      Action:
        - SQS:SendMessage
        - SQS:DeleteMessage
        - SQS:GetQueueUrl
        - SQS:ReceiveMessage
      Resource:
        Fn::GetAtt: 
          - OrdersQueue
          - Arn

custom:
  orderTableName: orders-table-${self:provider.stage}
  ordersBucketName: serverless-bucket-orders-${self:provider.stage}
  ordersQueue: orders-queue-${self:provider.stage}

functions:
  hello:
    handler: handler.hello
    events:
      - http:
          method: Get
          path: /
          cors: true
  createOrder:
    handler: src/lambdas/create-order.handler
    events:
      - http:
          method: POST
          path: /orders/create-order
          cors: true

  getOrder:
    handler: src/lambdas/get-order.handler
    events:
      - http:
          method: Get
          path: /orders/get-order/{id}
          cors: true
  orderProcessor:
    handler: src/lambdas/order-processor.handler
    events:
      - s3:
          bucket: ${self:custom.ordersBucketName}
          event: s3:ObjectCreated:*
          existing: true # as i mention it in the resources
  orderProducer:
     handler: src/lambdas/order-producer.handler
     events:
      - http:
          method: POST
          path: /orders/produce-order
          cors: true
  orderConsumer:
     handler: src/lambdas/order-consumer.handler
     events:
      - sqs:
          arn: 
            Fn::GetAtt:
              - OrdersQueue
              - Arn


resources:
  Resources:
    OrdersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
            # Hash or Range
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.orderTableName}
    OrdersBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.ordersBucketName}
    OrdersQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.ordersQueue}
